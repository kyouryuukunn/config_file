?? TITLE : C++ リスト(std::list)

cppreference.com -> C++ リスト

C++ リスト(std::list)

リストは連結リストに格納された要素のシーケンスである。 ベクタ と比較して挿入と削除は速く、ランダムアクセスは遅い。

assign()  リストに要素を割り当てる
back()  最終要素を返す
begin()  先頭を指すイテレータを返す
clear()  全ての要素を削除する
empty()  リストが空なら真
end()  末尾を指すイテレータを返す
erase()  要素を削除する
front()  先頭要素を返す
get_allocator()  リストのアロケータを返す
insert()  要素をリストに挿入する
max_size()  リストが保持できる最大要素数を返す
merge()  二つのリストを併合する
pop_back()  最終要素を削除する
pop_front()  先頭要素を削除する
push_back()  リストの末尾に要素を追加する
push_front()  リストの先頭に要素を追加する
rbegin()  リストの末尾を指すリバースイテレータを返す
remove()  リストから要素を削除する
remove_if()  条件を満たす要素を削除する
rend()  リストの先頭を指すリバースイテレータを返す
resize()  リストのサイズを変更する
reverse()  リストを反転させる
size()  リスト中の要素数を返す
sort()  リストをソートする
splice()  二つのリストを併合する
swap()  二つのリストを入れ替える
unique()  重複する要素を削除する


-------------------------------------------------------------------------------------- 



?? TITLE : C++ リスト

cppreference.com -> C++ リスト -> 詳細

C++ リスト

-------------------------------------------------------------------------------

assign

文法:



  void assign( input_iterator start, input_iterator end );
  void assign( size_type num, const TYPE &val );


assign() 関数はリストに start から end までのシーケンス、 もしくは val の num 個の複製を割り当てる。

関連項:
insert(),
-------------------------------------------------------------------------------

back

文法:



  reference back();


back() 関数はリストの最終要素への参照を返す。

関連項:
front(), pop_back(),
-------------------------------------------------------------------------------

begin

文法:



  iterator begin();


begin() 関数はリストの先頭を指す イテレータ を返す。 例:


    // 文字のリストを生成する
    list<char> charList;
    for( int i=0; i < 10; i++ )
      charList.push_front( i + 65 );

    // リストを表示する
    list<char>::iterator theIterator;
    for( theIterator = charList.begin(); theIterator != charList.end(); theIterator++ )
      cout << *theIterator;

関連項:
end(),
-------------------------------------------------------------------------------

clear

文法:



  void clear();


clear() 関数はリストから全ての要素を削除する。

-------------------------------------------------------------------------------

empty

文法:



  bool empty();


empty() 関数は現在のリストが空であるときに true を返し、 そうでないときに false を返す。例:


    list<int> the_list;
    for( int i = 0; i < 10; i++ )
      the_list.push_back( i );  
    while( !the_list.empty() ) {
      cout << the_list.front() << endl;
      the_list.pop_front();
    }
    
    

-------------------------------------------------------------------------------

end

文法:



  iterator end();


end() 関数はリスト末尾を指す イテレータ を返す。

関連項:
begin(),
-------------------------------------------------------------------------------

erase

文法:



  iterator erase( iterator pos );
  iterator erase( iterator start, iterator end );


erase() 関数は pos 位置にある要素、もしくは start と end の間にある要素を削除する。 戻り値は、削除した最終要素の直後を指す イテレータ である。

-------------------------------------------------------------------------------

front

文法:



  reference front();


front() はリストの先頭要素への参照を返す。


    list<int> the_list;
    for( int i = 0; i < 10; i++ )
      the_list.push_back( i );  
    while( !the_list.empty() ) {
      cout << the_list.front() << endl;
      the_list.pop_front();
    }

関連項:
back(),
-------------------------------------------------------------------------------

get_allocator

文法:



  allocator_type get_allocator();


get_allocator() 関数はリストのアロケータを返す。

-------------------------------------------------------------------------------

insert

文法:



  iterator insert( iterator pos, const TYPE &val );
  void insert( iterator pos, size_type num, const TYPE &val );
  void insert( iterator pos, input_iterator start, input_iterator end );


insert() 関数は以下のいずれかの動作を行う:

  * pos 位置にある要素の直前に val を挿入する
  * pos 位置にある要素の直前に val の num 個の複製を挿入する
  * pos 位置にある要素の直前もしくは start と end によって指示されるシーケンスを挿入する。

戻り値は、挿入された要素を指す イテレータ である。

-------------------------------------------------------------------------------

max_size

文法:



  size_type max_size();


max_size() 関数は、リストが保持できる最大要素数を返す。

-------------------------------------------------------------------------------

merge

文法:



  void merge( list &lst );
  void merge( list &lst, Comp compfunction );


merge() 関数はリストを lst と併合し、 順序を保ったまま連結したリストを生成する。 compfunction が与えられた場合には、 それをリストに対する比較関数として用いる。

-------------------------------------------------------------------------------

pop_back

文法:



  void pop_back();


pop_back() 関数はリストの最終要素を削除する。

関連項:
pop_front(),
-------------------------------------------------------------------------------

pop_front

文法:



  void pop_front();


pop_front() 関数はリストの先頭要素を削除する。

関連項:
pop_back(),
-------------------------------------------------------------------------------

push_back

文法:



  void push_back( const TYPE &val );


push_back() 関数はリストの末尾に val を追加する。例:


    list<int> the_list;
    for( int i = 0; i < 10; i++ )
      the_list.push_back( i );

関連項:
push_front(),
-------------------------------------------------------------------------------

push_front

文法:



  void push_front( const TYPE &val );


push_front() 関数は val をリスト先頭に挿入する。

関連項:
push_back(),
-------------------------------------------------------------------------------

rbegin

文法:



  reverse_iterator rbegin();


rbegin() 関数は、リストの末尾を指すリバース イテレータ を返す。

関連項:
rend(),
-------------------------------------------------------------------------------

remove

文法:



  void remove( const TYPE &val );


remove() 関数は、リストから val と等しい全ての要素を削除する。例:


    // アルファベットの先頭 10 文字からなるリストを生成する
    list<char> charList;
    for( int i=0; i < 10; i++ )
      charList.push_front( i + 65 );

    // 'E' のインスタンスを全て削除
    charList.remove( 'E' );
 

-------------------------------------------------------------------------------

remove_if

文法:



  void remove_if( UnPred pr );


remove_if() 関数は、リストから単項述語 pr が真となる全ての要素を削除する。

-------------------------------------------------------------------------------

rend

文法:



  reverse_iterator rend();


rend() 関数は、リストの先頭を指すリバース イテレータ を返す。

-------------------------------------------------------------------------------

resize

文法:



  void resize( size_type num, TYPE val );


resize() 関数はリストのサイズを num に変更する。 詰め物として追加された要素は、すべて値が val となる。

-------------------------------------------------------------------------------

reverse

文法:



  void reverse();


reverse() 関数はリストを反転させる。

-------------------------------------------------------------------------------

size

文法:



  size_type size();


size() 関数はリスト中の要素数を返す。

-------------------------------------------------------------------------------

sort

文法:



  void sort();
  void sort( Comp compfunction );


sort() 関数はリストをソートする。 オプションとして、 要素が他の要素よりも小さいかどうかを決定する比較関数として compfunction を使うことができる。

-------------------------------------------------------------------------------

splice

文法:



  void splice( iterator pos, list &lst );
  void splice( iterator pos, list &lst, iterator del );
  void splice( iterator pos, list &lst, iterator start, iterator end );


splice() 関数は pos 位置に lst を挿入する。 もし指定された場合には、 del にある要素、もしくは start と end の間にある要素は削除される。

-------------------------------------------------------------------------------

swap

文法:



  void swap( list &lst );


swap() 関数は、lst 中の要素を現在のリストの要素と入れ替える。

-------------------------------------------------------------------------------

unique

文法:



  void unique();
  void unique( BinPred pr );


unique() はリストから重複する要素を全て削除する。 pr が指定されたときには、それを非重複性を決定するために用いる。

