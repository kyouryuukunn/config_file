?? TITLE : C++ セット (std::set)

cppreference.com -> C++ セット

C++ セット(std::set)

C++ セットは順序づけられたオブジェクトの集合を保持する連想コンテナである。

begin()  セットの先頭を指すイテレータを返す
clear()  全ての要素を削除する
count()  一致する要素の数を返す
empty()  セットが空なら真
end()  セットの末尾を指すイテレータを返す
equal_range()  特定のキーと一致する先頭・末尾要素を指すイテレータを返す
erase()  要素を削除する
find()  要素を検索する
get_allocator()  セットのアロケータを返す
insert()  要素を挿入する
key_comp()  キーを比較する関数を返す
lower_bound()  特定の値以上である最初の要素を指すイテレータを返す
max_size()  要素の最大数を返す
rbegin()  セットの末尾を指すリバースイテレータを返す
rend()  セットの先頭を指すリバースイテレータを返す
size()  セット中の要素数を返す
swap()  二つのセットを入れ替える
upper_bound()  特定の値を越える最初の要素を指すイテレータを返す
value_comp()  値を比較する関数を返す


-------------------------------------------------------------------------------------- 



?? TITLE : C++ セット(std::set)

cppreference.com -> C++ セット -> 詳細

C++ セット(std::set)

-------------------------------------------------------------------------------

begin

文法:



  iterator begin();


begin() 関数はセットの先頭を指す イテレータ を返す。

-------------------------------------------------------------------------------

clear

文法:



  void clear();


clear() 関数はセットから全ての要素を削除する。

-------------------------------------------------------------------------------

count

文法:



  size_type count( const key_type &key );


count() 関数はセット中に key が登場する回数を返す。 セットでは重複する要素の存在は許されていないため、これは常に 0 もしくは 1 となる。

-------------------------------------------------------------------------------

empty

文法:



  bool empty();


empty() 関数は現在のセットが空であるときに true を返し、 そうでないときに false を返す。

-------------------------------------------------------------------------------

end

文法:



  const_iterator end();


end() 関数はセット末尾を指す イテレータ を返す。

-------------------------------------------------------------------------------

equal_range

文法:



  pair<iterator,iterator> equal_range( const key_type &key );


equal_range() 関数は二つのイテレータを返す - 一方は key を含む最初の要素を指し、他方は key を含む最後の要素を指す。

-------------------------------------------------------------------------------

erase

文法:



  void erase( iterator pos );
  void erase( iterator start, iterator end );
  size_type erase( const key_type &key );


erase() 関数は以下のいずれかの動作を行う:

  * pos 位置の要素を削除する。
  * start と end の間に位置する要素を削除する。
  * key 値を持つ全ての要素を削除し、削除した要素数を返す。

-------------------------------------------------------------------------------

find

文法:



  iterator find( const key_type &key );


find() 関数は現在のセットから key に一致する要素を検索し、 その要素への イテレータ を返す。 もし一致する要素が見つからない場合には、 セットの末尾を指す イテレータ を返す。

-------------------------------------------------------------------------------

get_allocator

文法:



  allocator_type get_allocator();


get_allocator() 関数はセットのアロケータを返す。

-------------------------------------------------------------------------------

insert

文法:



  iterator insert( iterator pos, const TYPE &val );
  void insert( input_iterator start, input_iterator end );
  pair<iterator,bool> insert( const TYPE &val );


insert() 関数は以下のいずれかの動作を行う:

  *  pos を挿入位置に関するヒントとして用いながら val を挿入し、 その要素を指す イテレータ を返す。 通常この操作には対数時間を要するが、 val がちょうど pos の直後に挿入される場合には定数時間が保証される。
  * start から end にある要素の範囲を挿入する。
  * val を挿入し、 挿入した要素を指す イテレータ と、 挿入が行われたか否かを記述する真偽値を返す。

重複する要素は挿入されないことに注意。

-------------------------------------------------------------------------------

key_comp

文法:



  key_compare key_comp();


key_comp() 関数はキーを比較する関数を返す。

-------------------------------------------------------------------------------

lower_bound

文法:



  iterator lower_bound( const key_type &key );


lower_bound() 関数は key 以上の値を持つ最初の要素を指す イテレータ を返す。

-------------------------------------------------------------------------------

max_size

文法:



  size_type max_size();


max_size() 関数はセットが保持できる最大要素数を返す。

-------------------------------------------------------------------------------

rbegin

文法:



  reverse_iterator rbegin();


rbegin() 関数はセットの末尾を指すリバース イテレータ を返す。

-------------------------------------------------------------------------------

rend

文法:



  reverse_iterator rend();


rend() 関数はセットの先頭を指すリバース イテレータ を返す。

-------------------------------------------------------------------------------

size

文法:



  size_type size();


size() 関数はセット中の要素数を返す。

-------------------------------------------------------------------------------

swap

文法:



  void swap( set<Key,Comp,Allocator> &obj );


swap() 関数はobj 中の要素を現在のセットの要素と交換する。

-------------------------------------------------------------------------------

upper_bound

文法:



  iterator upper_bound( const key_type &key );


upper_bound() 関数は key を越える値を持つ最初の要素を指す イテレータ を返す。

-------------------------------------------------------------------------------

value_comp

文法:



  value_compare value_comp();


value_comp() 関数は値を比較する関数を返す。

