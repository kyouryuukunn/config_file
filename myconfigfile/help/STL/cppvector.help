?? TITLE : C++ ベクタ(std::vector)

cppreference.com -> C++ ベクタ

C++ ベクタ(std::vector)

ベクタは、配列と同様に格納された連続要素を保持する。 ベクタ要素へのアクセス、ならびに要素の追加は 定数時間 で完了する。 一方で特定の値を突き止める、ならびにベクタへの要素挿入は 線形時間 を要する。

コンストラクタ  ベクタを生成する関数
演算子  ベクタの割り当て、比較を行う
assign()  ベクタに要素を割り当てる
at()  指定した位置の要素を返す
back()  最終要素を返す
begin()  先頭を指すイテレータを返す
capacity()  ベクタが保持できる要素数
clear()  全ての要素を削除する
empty()  ベクタが空なら真
end()  末尾を指すイテレータを返す
erase()  要素を削除する
front()  先頭要素を返す
get_allocator()  ベクタのアロケータを返す
insert()  要素をベクタに挿入する
max_size()  ベクタが保持できる最大要素数を返す
pop_back()  最終要素を削除する
push_back()  ベクタの末尾に要素を追加する
rbegin()  ベクタ末尾を指すリバースイテレータを返す
rend()  ベクタ先頭を指すリバースイテレータを返す
reserve()  ベクタが保持できる要素数を設定する
resize()  ベクタのサイズを変更する
size()  ベクタ中の要素数を返す
swap()  二つのベクタを入れ替える


-------------------------------------------------------------------------------------- 



・ｿ TITLE : C++ 繝吶け繧ｿ

cppreference.com -> C++ 繝吶け繧ｿ -> 隧ｳ邏ｰ

C++ 繝吶け繧ｿ

-------------------------------------------------------------------------------

繧ｳ繝ｳ繧ｹ繝医Λ繧ｯ繧ｿ

譁・ｳ・



  vector();
  vector( size_type size );
  vector( size_type num, const TYPE &val );
  vector( const vector &from );
  vector( input_iterator start, input_iterator end );


C++ 繝吶け繧ｿ縺ｯ莉･荳九・縺・★繧後°縺ｮ蠑墓焚繧剃ｼｴ縺｣縺ｦ讒狗ｯ峨＆繧後ｋ:

  * 縺ｪ縺・- 遨ｺ縺ｮ繝吶け繧ｿ繧剃ｽ懈・縺吶ｋ縲・
  * size - 螟ｧ縺阪＆ size 縺ｮ繝吶け繧ｿ繧剃ｽ懈・縺吶ｋ縲・
  * num 縺ｨ val - num 蛟九・ val 縺ｮ隍・｣ｽ繧偵・繧ｯ繧ｿ縺ｫ蜈･繧後ｋ縲・
  * from - from 縺ｨ蜷悟・螳ｹ縺ｮ繝吶け繧ｿ繧剃ｽ懈・縺吶ｋ縲・
  * start 縺ｨ end - start 縺九ｉ end 縺ｾ縺ｧ縺ｮ隕∫ｴ繧呈戟縺｣縺溘・繧ｯ繧ｿ繧剃ｽ懈・縺吶ｋ縲・

萓九∴縺ｰ縲∽ｻ･荳九・萓九・謨ｴ謨ｰ 42 縺ｮ 5 縺､縺ｮ隍・｣ｽ繧剃ｿ晄戟縺吶ｋ繝吶け繧ｿ繧呈ｧ狗ｯ峨☆繧九・


vector<int> v1( 5, 42 );
 

-------------------------------------------------------------------------------

貍皮ｮ怜ｭ・

譁・ｳ・



  v1 == v2
  v1 != v2
  v1 <= v2
  v1 >= v2
  v1 < v2
  v1 > v2 
  v[]


C++ 繝吶け繧ｿ縺ｯ讓呎ｺ匁ｼ皮ｮ怜ｭ・==, !=, <=, >=, <, 縺ｨ > 縺ｫ繧医▲縺ｦ豈碑ｼ・〒縺阪ｋ縲・繝吶け繧ｿ縺ｮ蛟九・・隕∫ｴ縺ｯ [] 貍皮ｮ怜ｭ舌↓繧医▲縺ｦ隱ｿ縺ｹ繧峨ｌ繧九・

莠後▽縺ｮ繝吶け繧ｿ縺ｯ遲峨＠縺上↑繧区擅莉ｶ縺ｯ谺｡縺ｮ騾壹ｊ縲・

  1.繧ｵ繧､繧ｺ縺悟酔縺倥√°縺､
  2.蜷・ｦ∫ｴ縺ｫ蟇ｾ縺励※縲∽ｸ譁ｹ縺ｮ繝吶け繧ｿ縺ｮ菴咲ｽｮ I 縺ｫ縺ゅｋ隕∫ｴ縺後∽ｻ匁婿縺ｮ繝吶け繧ｿ縺ｮ菴咲ｽｮ I 縺ｫ縺ゅｋ隕∫ｴ縺ｫ遲峨＠縺・・

繝吶け繧ｿ髢薙・豈碑ｼ・・霎樊嶌鬆・〒陦後ｏ繧後ｋ縲・

髢｢騾｣鬆・
at().
-------------------------------------------------------------------------------

assign

譁・ｳ・



  void assign( input_iterator start, input_iterator end );
  void assign( size_type num, const TYPE &val );


assign() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｫ蟇ｾ縺励※ start 縺九ｉ end 縺ｾ縺ｧ縺ｮ蛟､縲・繧ゅ＠縺上・ val 縺ｮ num 蛟九・隍・｣ｽ繧剃ｸ弱∴繧九・縺薙・髢｢謨ｰ縺ｯ縲√・繧ｯ繧ｿ縺ｮ莉･蜑阪・蜀・ｮｹ繧堤ｴ螢翫☆繧九・
-------------------------------------------------------------------------------

at

譁・ｳ・



  TYPE at( size_type pos );


at() 髢｢謨ｰ縺ｯ縲√・繧ｯ繧ｿ縺ｮ菴咲ｽｮ pos 縺ｫ縺ゅｋ隕∫ｴ縺ｸ縺ｮ蜿ら・繧定ｿ斐☆縲・菴咲ｽｮ pos 縺梧怏蜉ｹ縺ｪ遽・峇螟悶↓縺ゅｋ縺ｨ縺阪・ out_of_range 萓句､悶ｒ騾∝・縺吶ｋ縲・at() 髢｢謨ｰ縺ｯ [] 貍皮ｮ怜ｭ舌ｈ繧翫ｂ螳牙・縺ｧ縺ゅｋ縲・縺ｪ縺懊↑繧峨◎繧後・繝吶け繧ｿ蠅・阜縺ｮ螟夜Κ縺ｫ縺ゅｋ鬆・岼繧貞盾辣ｧ縺吶ｋ縺薙→縺後↑縺・◆繧√□縲・萓九∴縺ｰ縲∽ｻ･荳九・繧ｳ繝ｼ繝峨ｒ閠・∴繧・


vector<int> v( 5, 1 );

for( int i = 0; i < 10; i++ ) {
  cout << "Element " << i << " is " << v[i] << endl;
}
 

縺薙・繧ｳ繝ｼ繝峨・繝吶け繧ｿ譛ｫ蟆ｾ繧定ｶ・℃縺励∵ｽ懷惠逧・↓蜊ｱ髯ｺ縺ｪ邨先棡繧偵ｂ縺溘ｉ縺吶・莉･荳九・繧ｳ繝ｼ繝峨・驕吶°縺ｫ螳牙・縺ｧ縺ゅｍ縺・


vector<int> v( 5, 1 );

for( int i = 0; i < 10; i++ ) {
  cout << "Element " << i << " is " << v.at(i) << endl;
}
 

繝｡繝｢繝ｪ縺九ｉ辟｡諢丞袖縺ｪ蛟､繧定ｪｭ縺ｿ蜃ｺ縺昴≧縺ｨ隧ｦ縺ｿ繧倶ｻ｣繧上ｊ縺ｫ縲・at() 髢｢謨ｰ縺ｯ繝吶け繧ｿ繧定ｶ・℃縺励※縺・ｋ縺薙→繧堤炊隗｣縺励※萓句､悶ｒ騾∝・縺吶ｋ縺繧阪≧縲・

髢｢騾｣鬆・
[] 貍皮ｮ怜ｭ・
-------------------------------------------------------------------------------

back

譁・ｳ・



  TYPE back();


back() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ譛邨りｦ∫ｴ縺ｸ縺ｮ蜿ら・繧定ｿ斐☆縲ゆｾ・


vector<int> v;

for( int i = 0; i < 5; i++ ) {
  v.push_back(i);
}

cout << "The first element is " << v.front() 
     << " and the last element is " << v.back() << endl;
 

縺薙・繧ｳ繝ｼ繝峨・莉･荳九・蜃ｺ蜉帙ｒ逕滓・縺吶ｋ:


The first element is 0 and the last element is 4
 

髢｢騾｣鬆・
front().
-------------------------------------------------------------------------------

begin

譁・ｳ・



  iterator begin();


begin() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ蜈磯ｭ繧呈欠縺・繧､繝・Ξ繝ｼ繧ｿ 繧定ｿ斐☆縲・萓九∴縺ｰ縲∵ｬ｡縺ｮ繧ｳ繝ｼ繝峨・繧､繝・Ξ繝ｼ繧ｿ繧堤畑縺・※繝吶け繧ｿ荳ｭ縺ｮ蜈ｨ隕∫ｴ繧定｡ｨ遉ｺ縺励※縺・ｋ:


vector<int> v1( 5, 789 );
vector<int>::iterator it;
for( it = v1.begin(); it != v1.end(); it++ )
  cout << *it << endl;

髢｢騾｣鬆・
end().
-------------------------------------------------------------------------------

capacity

譁・ｳ・



  size_type capacity();


capacity() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺瑚ｨ俶・蝓溘ｒ遒ｺ菫昴＠逶ｴ縺吝ｿ・ｦ√↑縺励↓菫晄戟縺ｧ縺阪ｋ隕∫ｴ謨ｰ繧定ｿ斐☆縲・

-------------------------------------------------------------------------------

clear

譁・ｳ・



  void clear();


clear() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ蜈ｨ隕∫ｴ繧貞炎髯､縺吶ｋ縲・

-------------------------------------------------------------------------------

empty

譁・ｳ・



  bool empty();


empty() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺瑚ｦ∫ｴ繧呈戟縺｣縺ｦ縺・↑縺・→縺阪↓ true 繧定ｿ斐＠縲・縺昴≧縺ｧ縺ｪ縺・→縺阪↓ false 繧定ｿ斐☆縲・萓九∴縺ｰ縲∽ｻ･荳九・繧ｳ繝ｼ繝峨・荳弱∴繧峨ｌ縺溘・繧ｯ繧ｿ繧偵け繝ｪ繧｢縺励√◎縺ｮ蜀・ｮｹ繧帝・・〒陦ｨ遉ｺ縺吶ｋ:


vector<int> v;

for( int i = 0; i < 5; i++ ) {
  v.push_back(i);
}

while( !v.empty() ) {
  cout << v.back() << endl;
  v.pop_back();
}
 

髢｢騾｣鬆・
size()
-------------------------------------------------------------------------------

end

譁・ｳ・



  iterator end();


end() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ譛ｫ蟆ｾ繧呈欠縺・繧､繝・Ξ繝ｼ繧ｿ 繧定ｿ斐☆縲・繝吶け繧ｿ縺ｮ譛邨りｦ∫ｴ縺ｫ繧｢繧ｯ繧ｻ繧ｹ縺吶ｋ縺ｯ縲√う繝・Ξ繝ｼ繧ｿ繧偵ョ繧ｯ繝ｪ繝｡繝ｳ繝医☆繧句ｿ・ｦ√′縺ゅｋ縺薙→縺ｫ豕ｨ諢上・

髢｢騾｣鬆・
begin()
-------------------------------------------------------------------------------

erase

譁・ｳ・



  iterator erase( iterator pos );
  iterator erase( iterator start, iterator end );


erase() 髢｢謨ｰ縺ｯ菴咲ｽｮ pos 縺ｫ縺ゅｋ隕∫ｴ縲・繧ゅ＠縺上・ start 縺ｨend 縺ｮ髢薙↓縺ゅｋ隕∫ｴ繧貞炎髯､縺吶ｋ縲・謌ｻ繧雁､縺ｯ縲∝炎髯､縺輔ｌ縺滓怙邨りｦ∫ｴ縺ｮ逶ｴ蠕後ｒ謖・☆ 繧､繝・Ξ繝ｼ繧ｿ 縺ｧ縺ゅｋ縲・萓・


// 繝吶け繧ｿ繧剃ｽ懈・縺励√い繝ｫ繝輔ぃ繝吶ャ繝医・蜈磯ｭ 10 譁・ｭ励ｒ隱ｭ縺ｿ霎ｼ繧縲・
vector<char> alphaVector;
for( int i=0; i < 10; i++ )
  alphaVector.push_back( i + 65 );

int size = alphaVector.size();
vector<char>::iterator startIterator;
vector<char>::iterator tempIterator;

for( int i=0; i < size; i++ ) {
  startIterator = alphaVector.begin();
  alphaVector.erase( startIterator );

  // 繝吶け繧ｿ繧定｡ｨ遉ｺ縺吶ｋ
  for( tempIterator = alphaVector.begin(); tempIterator != alphaVector.end(); tempIterator++ )
    cout << *tempIterator;
  cout << endl;
}

縺薙・繧ｳ繝ｼ繝峨・莉･荳九・蜃ｺ蜉帙ｒ陦ｨ遉ｺ縺吶ｋ:


BCDEFGHIJ
CDEFGHIJ
DEFGHIJ
EFGHIJ
FGHIJ
GHIJ
HIJ
IJ
J

髢｢騾｣鬆・
pop_back().
-------------------------------------------------------------------------------

front

譁・ｳ・



  TYPE front();


front() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ蜈磯ｭ隕∫ｴ縺ｸ縺ｮ蜿ら・繧定ｿ斐☆縲・

髢｢騾｣鬆・
back().
-------------------------------------------------------------------------------

get_allocator

譁・ｳ・



  allocator_type get_allocator();


get_allocator() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ繧｢繝ｭ繧ｱ繝ｼ繧ｿ繧定ｿ斐☆縲・

-------------------------------------------------------------------------------

insert

譁・ｳ・



  iterator insert( iterator pos, const TYPE &val );
  void insert( iterator pos, size_type num, const TYPE &val );
  void insert( iterator pos, input_iterator start, input_iterator end );


insert() 髢｢謨ｰ縺ｯ莉･荳九・縺・★繧後°縺ｮ蜍穂ｽ懊ｒ陦後≧:

  * val 繧・pos 縺ｮ逶ｴ蜑阪↓謖ｿ蜈･縺・ 縺昴・隕∫ｴ繧呈欠縺・繧､繝・Ξ繝ｼ繧ｿ 繧定ｿ斐☆縲・
  * val 縺ｮ num 蛟九・隍・｣ｽ繧・pos 縺ｮ逶ｴ蜑阪↓謖ｿ蜈･縺吶ｋ縲・
  * start 縺九ｉ end 縺ｾ縺ｧ縺ｮ隕∫ｴ繧・pos 縺ｮ逶ｴ蜑阪↓謖ｿ蜈･縺吶ｋ縲・

萓・


// 繝吶け繧ｿ繧剃ｽ懈・縺励√い繝ｫ繝輔ぃ繝吶ャ繝医・蜈磯ｭ 10 譁・ｭ励ｒ隱ｭ縺ｿ霎ｼ繧縲・
vector<char> alphaVector;
for( int i=0; i < 10; i++ )
  alphaVector.push_back( i + 65 );

// 繝吶け繧ｿ縺ｫ 4 縺､縺ｮ C 繧呈諺蜈･縺吶ｋ
vector<char>::iterator theIterator = alphaVector.begin();
alphaVector.insert( theIterator, 4, 'C' );

// 繝吶け繧ｿ繧定｡ｨ遉ｺ縺吶ｋ
for( theIterator = alphaVector.begin(); theIterator != alphaVector.end(); theIterator++ )
  cout << *theIterator;

縺薙・繧ｳ繝ｼ繝峨・莉･荳九・蜃ｺ蜉帙ｒ陦ｨ遉ｺ縺吶ｋ:


CCCCABCDEFGHIJ

-------------------------------------------------------------------------------

max_size

譁・ｳ・



  size_type max_size();


max_size() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺御ｿ晄戟縺ｧ縺阪ｋ譛螟ｧ隕∫ｴ謨ｰ繧定ｿ斐☆縲・

-------------------------------------------------------------------------------

pop_back

譁・ｳ・



  void pop_back();


pop_back() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ譛邨りｦ∫ｴ繧貞炎髯､縺吶ｋ縲ゆｾ・


vector<char> alphaVector;
for( int i=0; i < 10; i++ )
  alphaVector.push_back( i + 65 );

int size = alphaVector.size();
vector<char>::iterator theIterator;
for( int i=0; i < size; i++ ) {
  alphaVector.pop_back();
  for( theIterator = alphaVector.begin(); theIterator != alphaVector.end(); theIterator++ )
    cout << *theIterator;
  cout << endl;
}

縺薙・繧ｳ繝ｼ繝峨・莉･荳九・蜃ｺ蜉帙ｒ陦ｨ遉ｺ縺吶ｋ:


ABCDEFGHI
ABCDEFGH
ABCDEFG
ABCDEF
ABCDE
ABCD
ABC
AB
A

髢｢騾｣鬆・
erase().
-------------------------------------------------------------------------------

push_back

譁・ｳ・



  void push_back( const TYPE &val );


push_back() 髢｢謨ｰ縺ｯ val 繧偵・繧ｯ繧ｿ縺ｮ譛ｫ蟆ｾ縺ｫ霑ｽ蜉縺吶ｋ縲・

-------------------------------------------------------------------------------

rbegin

譁・ｳ・



  reverse_iterator rbegin();


rbegin() 髢｢謨ｰ縺ｯ繝吶け繧ｿ譛ｫ蟆ｾ繧呈欠縺吶Μ繝舌・繧ｹ繧､繝・Ξ繝ｼ繧ｿ 繧定ｿ斐☆縲・

-------------------------------------------------------------------------------

rend

譁・ｳ・



  reverse_iterator rend();


rend() 縺ｯ繝吶け繧ｿ蜈磯ｭ繧呈欠縺吶Μ繝舌・繧ｹ繧､繝・Ξ繝ｼ繧ｿ 繧定ｿ斐☆縲・

-------------------------------------------------------------------------------

reserve

譁・ｳ・



  void reserve( size_type size );


reserve() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺梧怙蟆上〒繧・size 蛟九・隕∫ｴ繧剃ｿ晄戟縺ｧ縺阪ｋ繧医≧縺ｫ縺吶ｋ縲・
-------------------------------------------------------------------------------

resize

譁・ｳ・



  void resize( size_type size, TYPE val );


resize() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ繧ｵ繧､繧ｺ繧・size 縺ｫ螟画峩縺励・譁ｰ隕上↓霑ｽ蜉縺輔ｌ縺滄・岼繧・val 縺ｫ險ｭ螳壹☆繧九・
-------------------------------------------------------------------------------

size

譁・ｳ・



  size_type size();


size() 髢｢謨ｰ縺ｯ繝吶け繧ｿ荳ｭ縺ｮ隕∫ｴ謨ｰ繧定ｿ斐☆縲・

髢｢騾｣鬆・
empty()
-------------------------------------------------------------------------------

swap

譁・ｳ・



  void swap( vector &from );


swap() 髢｢謨ｰ縺ｯ繝吶け繧ｿ縺ｮ隕∫ｴ繧・from 縺ｮ隕∫ｴ縺ｨ莠､謠帙☆繧九・

